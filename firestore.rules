rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin (for non-user collections)
    function isAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Allow users to read and write their own profile
    match /users/{userId} {
      // Users can always read their own profile
      allow read: if request.auth != null && request.auth.uid == userId;
      // Admins can read any user profile (but avoid circular dependency)
      allow read: if request.auth != null && 
                     exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      // Users can create their own profile
      allow create: if request.auth != null && request.auth.uid == userId;
      // Users can update their own profile (except isAdmin field)
      allow update: if request.auth != null && request.auth.uid == userId && 
                       !request.resource.data.diff(resource.data).affectedKeys().hasAny(['isAdmin']);
      // Only admins can update the isAdmin field
      allow update: if request.auth != null && 
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isAdmin', 'updatedAt']);
      // Only admins can delete user profiles
      allow delete: if request.auth != null && 
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Allow users to read and write their own tasks
    match /users/{userId}/tasks/{taskId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Allow authenticated users to read and write to the directory collection
    match /directory/{document=**} {
      allow read, write: if request.auth != null;
    }

    // News updates collection
    match /news_updates/{updateId} {
      // Anyone authenticated can read published updates
      allow read: if request.auth != null && resource.data.isPublished == true;
      // Only admins can read all updates (including drafts)
      allow read: if request.auth != null && isAdmin();
      // Only admins can create, update, and delete news updates
      allow create, update, delete: if request.auth != null && isAdmin();
    }

    // Allow users to read and write their own reports
    match /reports/{reportId} {
      // Users can read their own reports
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      // Admins can read all reports
      allow read: if request.auth != null && isAdmin();
      // Users can create their own reports
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      // Users can update/delete their own reports
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      // Admins can update/delete any report (for admin management)
      allow update, delete: if request.auth != null && isAdmin();
    }

    // Allow users to read and write their own mile entries
    match /mile_entries/{entryId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Allow users to read and write their own field log entries
    match /field_logs/{entryId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.userId || 
        request.auth.uid == request.resource.data.userId
      );
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
  }
}
